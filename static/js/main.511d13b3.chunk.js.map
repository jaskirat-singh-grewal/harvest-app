{"version":3,"sources":["logo.svg","components/FieldForm.jsx","components/TractorForm.jsx","App.js","reportWebVitals.js","index.js"],"names":["FieldForm","state","length","width","numberOfTractors","change","e","setState","target","name","value","props","className","this","onChange","type","id","placeholder","Component","speed","uTurnTime","tractorWidth","num","App","field","tractors","resultTime","timeTractor","t","s","trips","Math","ceil","time","calResult","totalSpeed","forEach","totalSeconds","parseInt","Number","isNaN","hours","floor","minutes","seconds","countChange","numOfNew","arrLength","i","newTractor","push","pop","setStateSync","parseFloat","renderTractors","Promise","resolve","map","TractorForm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.511d13b3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\nimport React, { Component } from 'react';\nimport '../App.css';\n\nclass FieldForm extends Component {\n  state = {\n    length: 0,\n    width: 0,\n    numberOfTractors: 1\n  }\n\n  change = e => {\n    this.setState({ [e.target.name]: e.target.value });\n    this.props.change(e);\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          <div className=\"form-group\">\n            <label >Field Length (meters): </label>\n            <input value={this.state.length !== 0 ? this.state.length : \"\"} onChange={e => this.change(e)} type=\"number\" name=\"length\" className=\"form-control\" id=\"fieldLength\" placeholder=\"meters\" />\n          </div>\n          <div className=\"form-group\">\n            <label >Field Width (meters): </label>\n            <input value={this.state.width !== 0 ? this.state.width : \"\"} onChange={e => this.change(e)} type=\"number\" name=\"width\" className=\"form-control\" id=\"fieldWidth\" placeholder=\"meters\" />\n          </div>\n          <div className=\"form-group\">\n            <label>Number of combines: </label>\n            <input value={this.state.numberOfTractors !== 1 ? this.state.numberOfTractors : \"\"} onChange={e => this.change(e)} type=\"number\" name=\"numberOfTractors\" className=\"form-control\" id=\"numberOfTractors\" placeholder=\"count\" />\n          </div>\n        </form>\n      </div>\n\n    );\n  }\n}\n\nexport default FieldForm;","\nimport React, { Component } from 'react';\nimport '../App.css';\n\nclass FieldForm extends Component {\n    state = {\n        speed: 0,\n        uTurnTime: 0,\n        tractorWidth: 0,\n        num: this.props.num,\n    }\n    change = e => {\n        e.num = this.state.num;\n        this.setState({ [e.target.name]: e.target.value });\n        this.props.change(e);\n    }\n    render() {\n        return (<div>\n            <br />\n            <form>\n                <h2> Combine number: {this.props.num + 1}</h2>\n                <div className=\"form-group\">\n                    <label >Average Combine's Speed (km/h): </label>\n                    <input value={this.state.speed !== 0 ? this.state.speed : \"\"} onChange={e => this.change(e)} type=\"number\" className=\"form-control\" id=\"speed\" name=\"speed\" num={this.props.num} placeholder=\"Km/h\" />\n                </div>\n                <div className=\"form-group\">\n                    <label >Combine's header Width (meters): </label>\n                    <input value={this.state.width !== 0 ? this.state.width : \"\"} onChange={e => this.change(e)} type=\"number\" className=\"form-control\" id=\"tractorWidth\" name=\"tractorWidth\" num={this.props.num} placeholder=\"meters\" />\n                </div>\n                <div className=\"form-group\">\n                    <label >Time required to make a U-Turn (seconds): </label>\n                    <input value={this.state.uTurnTime !== 0 ? this.state.uTurnTime : \"\"} onChange={e => this.change(e)} type=\"number\" className=\"form-control\" id=\"uturnTime\" name=\"uTurnTime\" num={this.props.num} placeholder=\"seconds\" />\n                </div>\n            </form>\n            <br />\n        </div>\n\n\n        );\n    }\n}\n\nexport default FieldForm;","import logo from './logo.svg';\nimport './App.css';\nimport FieldForm from \"./components/FieldForm.jsx\";\nimport TractorForm from \"./components/TractorForm.jsx\"\nimport React, { Component } from 'react';\nclass App extends Component {\n  state = {\n    field: {\n      length: 0,\n      width: 0,\n    },\n    numberOfTractors: 1,\n    tractors: [],\n    resultTime: 0,\n  }\n  timeTractor = (t) => {\n    var s = this.state\n    var speed = t.speed / 3.6\n    if (s.field.width <= t.width) {\n      return s.field.length / speed;\n    }\n    var trips = Math.ceil(s.field.width / t.width);\n    var time = t.uTurnTime * (trips - 1);\n    time += ((s.field.length - 2 * t.width) * trips) / speed;\n    return time;\n  }\n  calResult = () => {\n    var totalSpeed = 0\n    this.state.tractors.forEach((t) => {\n      totalSpeed += 1 / this.timeTractor(t)\n    });\n    var totalSeconds = 1 / totalSpeed;\n    totalSeconds = parseInt(totalSeconds);\n    if (Number.isNaN(totalSeconds)) {\n      return \"infinite hours\"\n    }\n    var hours = Math.floor(totalSeconds / 3600);\n    var minutes = Math.floor((totalSeconds % 3600) / 60);\n    var seconds = totalSeconds % 60;\n    var resultStr = \"\" + (hours === 0 ? \"\" : (hours === 1 ? hours + \" hour \" : hours + \" hours \"))\n      + (minutes === 0 ? \"\" : (minutes === 1 ? minutes + \" minute \" : minutes + \" minutes \"))\n      + (seconds === 0 ? \"\" : (seconds === 1 ? seconds + \" second \" : seconds + \" seconds\"));\n    return resultStr;\n  }\n\n\n\n  countChange = () => {\n    var tractors = this.state.tractors;\n    var numOfNew = this.state.numberOfTractors - this.state.tractors.length;\n    var arrLength = this.state.tractors.length;\n    if (numOfNew > 0) {\n      for (var i = 0; i < numOfNew; i++) {\n        var newTractor = {}\n        newTractor.speed = 0;\n        newTractor.uTurnTime = 0;\n        newTractor.width = 0;\n        newTractor.num = i + arrLength;\n        tractors.push(newTractor);\n      }\n    } else if (numOfNew < 0) {\n      for (i = 0; i > numOfNew; i--) {\n        tractors.pop();\n      }\n    }\n    this.setStateSync({ tractors: tractors });\n  }\n  change = e => {\n    var value = \"\"\n    if (e.target.value === \"\") {\n      value = \"0\"\n    } else {\n      value = e.target.value;\n    }\n    if (e.target.name === \"numberOfTractors\") {\n      if (e.target.value === \"\") {\n        this.setState({ numberOfTractors: 1 }, () => { this.countChange() })\n      } else {\n        this.setState({ numberOfTractors: parseFloat(e.target.value) }, () => { this.countChange() });\n      }\n    } else if (e.target.name === \"speed\" || e.target.name === \"tractorWidth\" || e.target.name === \"uTurnTime\") {\n      var tractors = this.state.tractors;\n      if (e.target.name === 'tractorWidth') {\n        tractors[e.num].width = parseFloat(value);\n      } else if (e.target.name === 'speed') {\n        tractors[e.num].speed = parseFloat(value);\n      } else {\n        tractors[e.num].uTurnTime = parseFloat(value);\n      }\n      this.setStateSync({ tractors: tractors });\n    } else {\n      this.setStateSync({\n        field: {\n          ...this.state.field,\n          [e.target.name]: parseFloat(value)\n        }\n      });\n    }\n  }\n  renderTractors = () => {\n    var length = this.state.numberOfTractors;\n    for (var i = 0; i < length; i++) {\n\n    }\n  }\n  setStateSync = (e) => {\n    return new Promise(resolve => {\n      this.setState(e, () => resolve());\n    });\n  }\n  render() {\n    this.calResult();\n    return (\n      <div className=\"App\" >\n        <header className=\"App-header\">\n          Calculate the Time Required to Harvest a Field of Crop!\n      </header>\n        <br /><br />\n        <h2>Field Parameters</h2>\n        <FieldForm change={e => this.change(e)} />\n        {\n          this.state.tractors.map((e) => { return (<TractorForm change={e => this.change(e)} num={e.num} key={e.num} />) })\n        }\n        <br /><br /><br />\n        <div className=\"jumbotron\">\n          <h3>All combines will take {this.calResult()} to havest the crop.</h3>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}